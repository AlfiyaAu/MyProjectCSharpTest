@page "/result"
@using BlazorWebAssemblyProjectTest.Shared
@using BlazorWebAssemblyProjectTest.Client
@using Microsoft.EntityFrameworkCore;
@using BlazorWebAssemblyProjectTest;
@using System.Net;
@using System.Net.Mail;
@using System.Net.Http.Json;
@using System.Text.Json;
@inject HttpClient Http
@inject HttpClient Https
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Result</PageTitle>

@* <Link href="/css/styles.css" rel="stylesheet" type="text/css" /> *@
<Link href="/ResultStyles1.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">



@* <div class="Next"> @res </div> *@

<br />
<br />
<br />
<br />
<br />


    <EditForm class="Edit_form" Model="@clients" OnSubmit="SendResult">
        <div class="contacts_form">
            <div class = "form1">
                <h5> Ваше имя </h5>
            </div>

            <div class="form1">
                <InputText class="form" placeholder="Введите ваше имя" @bind-Value="clients.Name"></InputText>
            </div>

            <div class="form1">
                <button type="submit" class="form_btm2"> Получить результат </button>
            </div>
        </div>
    </EditForm>


@* <div>
    <button type="submit" class="form_btm" @onclick = "SendResult"> Получить результат </button>
</div> *@

@* <div class="Next"> @test </div> *@

@* <div class="Next"> @userSelfType.Name </div> *@

@* <div class="Next"> @endResult </div> *@

<div class="Next"> @message </div>
<div class="Next1"> @message1 </div>
<div class="Next1"> @message2 </div>
<div class="Next1"> @message3 </div>
<div class="Next1"> @message4 </div>
<div class="Next1"> @message5 </div>
<div class="Next1"> @message6 </div>

@* 
        <script>
               if (window.localStorage) {
                    var elements = document.querySelectorAll('[name]');

                   for (var i = 0, length = elements.length; i < length; i++) {
                        (function(element) {
                             var name = element.getAttribute('name');

                            element.value = localStorage.getItem(name) || '';

                            element.onkeyup = function() {
                                localStorage.setItem(name, element.value);
                            };
                        })(elements[i]);
                   }
               }
        </script> *@



@code {

    string res;
    // double endResult;

    double selfType1;
    double selfType2;
    double selfType3;
    double selfType4;
    double selfType5;
    double selfType6;

    string names;

    private User newUser = new User();
    // private string test = "";
    public List<Answer> UserAnswers;
    public IEnumerable<UserSelfType> userSelfTypes;
    public Clients clients = new Clients();

    public IEnumerable<Clients> clientses;

    string message = "";
    string message1 = "";
    string message2 = "";
    string message3 = "";
    string message4 = "";
    string message5 = "";
    string message6 = "";



    public async Task SendResult()
    {
        res = await localStorage.GetItemAsync<string>("userID");

        clients.IdClient = res;

        await Http.PostAsJsonAsync<Clients>("api/question/Client", clients);

        userSelfTypes = await Http.GetFromJsonAsync<IEnumerable<UserSelfType>>($"api/question");
        clientses = await Http.GetFromJsonAsync<IEnumerable<Clients>>($"api/question/getClient");


        names = clientses.FirstOrDefault(x => x.IdClient == res).Name;

        double selfType1 = (int)Math.Round(userSelfTypes.FirstOrDefault(x => x.IdUser == res).Percent1);
        double selfType2 = (int)Math.Round(userSelfTypes.FirstOrDefault(x => x.IdUser == res).Percent2);
        double selfType3 = (int)Math.Round(userSelfTypes.FirstOrDefault(x => x.IdUser == res).Percent3);
        double selfType4= (int)Math.Round(userSelfTypes.FirstOrDefault(x => x.IdUser == res).Percent4);
        double selfType5 = (int)Math.Round(userSelfTypes.FirstOrDefault(x => x.IdUser == res).Percent5);
        double selfType6 = (int)Math.Round(userSelfTypes.FirstOrDefault(x => x.IdUser == res).Percent6);

        double[] arrayST = new double[] { selfType1, selfType2, selfType3, selfType4, selfType5, selfType6 };


        {
            for (int i = 0; i <= arrayST.Length; i++)
            {
                if (selfType1 > selfType2 && selfType1 > selfType3 && selfType1 > selfType4 && selfType1 > selfType5 && selfType1 > selfType6)
                {
                    message = $"{names}, Ваш ключевой тип личности ТВОРЕЦ - {selfType1}%.";
                    message1 = $"Остальные типы личности проявлены менее активно, либо не проявлены совсем:";
                    message2 = $"ИСКАТЕЛЬ - {selfType2}%";
                    message3 = $"БУНТАРЬ - {selfType3}%";
                    message4 = $"ЭСТЕТ - {selfType4}%";
                    message5 = $"ОПЕКУН - {selfType5}%";
                    message6 = $"СЛАВНЫЙ МАЛЫЙ - {selfType6}%";
                }

                else if (selfType2 > selfType1 && selfType2 > selfType3 && selfType2 > selfType4 && selfType2 > selfType5 && selfType2 > selfType6)
                {
                    message = $"{names}, Ваш ключевой тип личности ИСКАТЕЛЬ - {selfType2}%";
                    message1 = $"Остальные типы личности проявлены менее активно, либо не проявлены совсем:";
                    message2 = $"ТВОРЕЦ - {selfType1}%";
                    message3 = $"БУНТАРЬ - {selfType3}%";
                    message4 = $"ЭСТЕТ - {selfType4}%";
                    message5 = $"ОПЕКУН - {selfType5}%";
                    message6 = $"СЛАВНЫЙ МАЛЫЙ - {selfType6}%";
                }
                else if (selfType3 > selfType1 && selfType3 > selfType2 && selfType3 > selfType4 && selfType3 > selfType5 && selfType3 > selfType6)
                {
                    message = $"{names}, Ваш ключевой тип личности БУНТАРЬ - {selfType3}%";
                    message1 = $"Остальные типы личности проявлены менее активно, либо не проявлены совсем:";
                    message2 = $"ТВОРЕЦ - {selfType1}%";
                    message3 = $"БУНТАРЬ - {selfType2}%";
                    message4 = $"ЭСТЕТ - {selfType4}%";
                    message5 = $"ОПЕКУН - {selfType5}%";
                    message6 = $"СЛАВНЫЙ МАЛЫЙ - {selfType6}%";

                }
                else if (selfType4 > selfType1 && selfType4 > selfType2 && selfType4 > selfType3 && selfType4 > selfType5 && selfType4 > selfType6)
                {
                    message = $"{names}, Ваш ключевой тип личности ЭСТЕТ - {selfType4}%";
                    message1 = $"Остальные типы личности проявлены менее активно, либо не проявлены совсем:";
                    message2 = $"ТВОРЕЦ - {selfType1}%";
                    message3 = $"ИСКАТЕЛЬ - {selfType2}%";
                    message4 = $"БУНТАРЬ - {selfType3}%";
                    message5 = $"ОПЕКУН - {selfType5}%";
                    message6 = $"СЛАВНЫЙ МАЛЫЙ - {selfType6}%";

                }
                else if(selfType5 > selfType1 && selfType5 > selfType2 && selfType5 > selfType3 && selfType5 > selfType4 && selfType5 > selfType6)
                {
                    message = $"{names}, Ваш ключевой тип личности ОПЕКУН - {selfType5}%.";
                    message1 = $"Остальные типы личности проявлены менее активно, либо не проявлены совсем:";
                    message2 = $"ТВОРЕЦ - {selfType1}%";
                    message3 = $"ИСКАТЕЛЬ - {selfType2}%";
                    message4 = $"БУНТАРЬ - {selfType3}%";
                    message5 = $"ЭСТЕТ - {selfType4}%";
                    message6 = $"СЛАВНЫЙ МАЛЫЙ - {selfType6}%";
                }
                else if (selfType6 > selfType1 && selfType6 > selfType2 && selfType6 > selfType3 && selfType6 > selfType4 && selfType6 > selfType5)
                {
                    message = $"{names}, Ваш ключевой тип личности СЛАВНЫЙ МАЛЫЙ - {selfType6}%.";
                    message1 = $"Остальные типы личности проявлены менее активно, либо не проявлены совсем:";
                    message2 = $"ТВОРЕЦ - {selfType1}%";
                    message3 = $"ИСКАТЕЛЬ - {selfType2}%";
                    message4 = $"БУНТАРЬ - {selfType3}%";
                    message5 = $"ЭСТЕТ - {selfType4}%";
                    message6 = $"ОПЕКУН - {selfType5}%";
                }
                else
                {
                    message = "Error!!!";
                }
            }
        }


    }

 
  
   // static void SendResult()
   //      {


   //      // questionInfo = await Http.GetFromJsonAsync<UserSelfType>($"api/question/{number}");

   //      // // // // // // // //smtp сервер
   //      // // // // // // // string smtpHost = "smtp.gmail.com";
   //      // // // // // // // //smtp порт
   //      // // // // // // // int smtpPort = 587;
   //      // // // // // // // // //логин
   //      // // // // // // // // string login = "login";
   //      // // // // // // // // //пароль
   //      // // // // // // // // string pass = "pass";

   //      // // // // // // // //создаем подключение
   //      // // // // // // // SmtpClient client = new SmtpClient(smtpHost, smtpPort);
   //      // // // // // // // // client.Credentials = new NetworkCredential(login, pass);

   //      // // // // // // // //От кого письмо
   //      // // // // // // // string from = "Tom";
   //      // // // // // // // //Кому письмо
   //      // // // // // // // string to = "aauisheva2008@yandex.ru";
   //      // // // // // // // //Тема письма
   //      // // // // // // // string subject = "Письмо от C Sharp";
   //      // // // // // // // //Текст письма
   //      // // // // // // // string body = "Привет! /* \n\n\n  */Это тестовое письмо от C Sharp";

   //      // // // // // // // //Создаем сообщение
   //      // // // // // // // MailMessage mess = new MailMessage(from, to, subject, body);
   //      // // // // // // // client.Send(mess);

   //      // // // // // // // try
   //      // // // // // // // {
   //      // // // // // // //     client.Send(mess);
   //      // // // // // // //     // Console.WriteLine("Message send");
   //      // // // // // // // }
   //      // // // // // // // catch (Exception ex)
   //      // // // // // // // {
   //      // // // // // // //     // Console.WriteLine(ex.ToString());
   //      // // // // // // //     // Console.ReadKey();
   //      // // // // // // //     String test = "!!!";
   //      // // // // // // // }


   //          // // отправитель - устанавливаем адрес и отображаемое в письме имя
   //          // MailAddress from = new MailAddress("Tom");
   //          // // кому отправляем
   //          // MailAddress to = new MailAddress("aauisheva2008@yandex.ru");
   //          // // создаем объект сообщения
   //          // MailMessage m = new MailMessage(from, to);
   //          // // тема письма
   //          // m.Subject = "Тест";
   //          // // текст письма
   //          // m.Body = "<h2>Письмо-тест работы smtp-клиента</h2>";
   //          // // письмо представляет код html
   //          // m.IsBodyHtml = true;
   //          // // адрес smtp-сервера и порт, с которого будем отправлять письмо
   //          // SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587);
   //          // // логин и пароль
   //          // // smtp.Credentials = new NetworkCredential("somemail@gmail.com", "mypassword");
   //          // // smtp.EnableSsl = true;
   //          // smtp.Send(m);
   //          // // Console.Read();
   //      }
}